name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Display Root Directory Structure
        run: |
          echo "Root directory structure:"
          ls -al
          echo "MODELS directory structure:"
          ls -al MODELS || echo "MODELS directory not found"
          echo "Contents of FileStorage.sln:"
          cat FileStorage.sln || echo "Solution file not found"
      
      # Temporary debug step to check for MODELS.csproj
      - name: Display MODELS Directory and Project File Structure
        run: |
          echo "Checking if MODELS directory and MODELS.csproj exist:"
          ls -al MODELS || echo "MODELS directory not found"
          ls -al MODELS/MODELS.csproj || echo "MODELS.csproj not found in MODELS directory"

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0'

      - name: Restore dependencies
        run: dotnet restore FileStorage.sln

      - name: Build the solution
        run: dotnet build FileStorage.sln --configuration Release

      - name: Run Unit Tests
        run: dotnet test FileStorage.sln --no-build --verbosity normal

      - name: Run Code Analysis with SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet sonarscanner begin \
            /k:"CamielAdriaens_FileStorageServer2" \
            /o:"CamielAdriaens" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" # Adjust if using a different coverage report format

          dotnet build FileStorage.sln --configuration Release
          dotnet test FileStorage.sln --no-build --verbosity normal --collect:"XPlat Code Coverage"
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Upload Code Coverage to SonarCloud
        if: success() # Only run if previous steps succeed
        run: |
          # Ensure code coverage file is generated in the correct format (OpenCover or other) for SonarCloud
          echo "Uploading code coverage to SonarCloud completed."
