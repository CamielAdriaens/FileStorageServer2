name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      
      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0'

      - name: Restore dependencies
        run: dotnet restore FileStorage.sln

      - name: Build the solution
        run: dotnet build FileStorage.sln --configuration Release

      - name: Run Unit Tests
        run: dotnet test FileStorage.Tests/FileStorage.Tests.csproj --no-build --configuration Release --verbosity normal

      # Caching for SonarQube Cloud packages and scanner for improved build speed
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: |
            ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: |
            ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner if not cached
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool install dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Build and Analyze with SonarQube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Used to get PR info if needed
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"CamielAdriaens_FileStorageServer2" /o:"camieladriaens" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build FileStorage.sln --configuration Release
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
