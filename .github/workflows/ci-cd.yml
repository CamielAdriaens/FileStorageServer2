name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5 
          -e GITHUB_ACTIONS=true 
          -e CI=true
    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      # Step 3: Restore Dependencies
      - name: Restore dependencies
        run: dotnet restore FileStorage.sln

      # Step 4: Build the Solution
      - name: Build the solution
        run: dotnet build FileStorage.sln --configuration Release

      # Step 5: Run Unit Tests with Code Coverage
      - name: Run Unit Tests with Code Coverage
        run: |
          mkdir -p TestResults/coverage  # Ensure the coverage folder exists
          # Run the tests and collect coverage in 'cobertura' format
          dotnet test FileStorage.Tests/FileStorage.Tests.csproj \
            --no-build --configuration Release \
            /p:CollectCoverage=true \
            /p:CoverletOutput=TestResults/coverage/ \
            /p:CoverletOutputFormat=cobertura \
            --verbosity normal
        continue-on-error: true  # Ensure tests don't block subsequent steps

      # Step 6: Install SonarQube Cloud Scanner if Not Cached
      - name: Install SonarQube Cloud scanner if not cached
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool install dotnet-sonarscanner --tool-path ./.sonar/scanner
      # Step 7: SonarQube Analysis (with coverage report directly sent to SonarCloud)
      - name: Run SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin \
            /k:"CamielAdriaens_FileStorageServer2" \
            /o:"camieladriaens" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.cobertura.reportsPaths="TestResults/coverage/coverage.cobertura.xml"
          
          # Build the project after the sonar scanner begins
          dotnet build FileStorage.sln --configuration Release
          # Complete the SonarQube analysis
          ./.sonar/scanner/dotnet-sonarscanner end \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      # Step 8: Check Docker Version
      - name: Check Docker Version
        run: docker --version

      # Step 9: List Docker Images
      - name: List Docker Images
        run: docker images

      # Step 10: List Running Docker Containers
      - name: List Running Docker Containers
        run: docker ps

      # Step 11: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 12: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 13: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t camieladriaen/filestorageserverapp:${{ github.sha }} .
      # Step 14: Push Docker Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          docker push camieladriaen/filestorageserverapp:${{ github.sha }}
